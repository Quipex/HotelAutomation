import { Divider } from '~/app/message_components/common';
import { DATE_SHORT, DATETIME_MOMENTJS } from '~/common/constants';
import { HotelDailyDashboardDto } from '~/common/types';
import { addToDate, formatDate, subtractFromDate } from '~/common/utils/dates';

const b = (text) => `<b>${text}</b>`;

const important = (count: number) => {
  const icon = count === 0 ? ' ‚òë' : '‚ùó';
  return `${b(count)}${icon}`;
};

const notImportant = (count: number) => {
  const icon = count === 0 ? ' ‚òë' : '‚ùï';
  return `${b(count)}${icon}`;
};

const getRelevantTitle = (date: Date): string => {
  const now = new Date();
  const shortDate = formatDate(date, DATE_SHORT);
  const isToday = formatDate(date) === formatDate(now);
  if (isToday) {
    return `–°–µ–≥–æ–¥–Ω—è (${shortDate})`;
  }
  const isTomorrow = formatDate(now) === formatDate(subtractFromDate({ date, unit: 'days', amount: 1 }));
  if (isTomorrow) {
    return `–ó–∞–≤—Ç—Ä–∞ (${shortDate})`;
  }
  const isYesterday = formatDate(now) === formatDate(addToDate({ date, unit: 'days', amount: 1 }));
  if (isYesterday) {
    return `–í—á–µ—Ä–∞ (${shortDate})`;
  }
  return `–î–∞—Ç–∞ ${shortDate}`;
};

const Dashboard = (
  {
    today,
    tomorrow,
    noPrepaidBookings,
    actuallyLivingButNotMarked,
    unreadNotifications,
    synchronizationTime
  }: HotelDailyDashboardDto,
  date: Date
) => {
  const todayTitle = getRelevantTitle(date);
  const theNextDate = addToDate({ date, unit: 'days', amount: 1 }).toDate();
  const tomorrowTitle = getRelevantTitle(theNextDate);
  const syncTimeText = formatDate(new Date(synchronizationTime), DATETIME_MOMENTJS);

  return [
    '<i>–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (—Å –≤–Ω–µ—à–Ω–∏–º —Å–µ—Ä–≤–µ—Ä–æ–º)</i>',
    `<i>${syncTimeText}</i>`,
    '',
    `<b>${todayTitle}</b>`,
    `${b(today.arrivals)} –∑–∞–µ–∑–¥ üì• | ${b(today.departures)} –≤—ã–µ–∑–¥ üì§`,
    `${b(today.living)} –ø—Ä–æ–∂–∏–≤–∞–µ—Ç üõå | ${b(today.cars)} –º–∞—à–∏–Ω üöó`,
    `${b(today.newBookingsOverall)} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π üÜï (${b(today.newBookingsManually)} –≤—Ä—É—á–Ω—É—é ‚úç)`,
    Divider(),
    `<b>${tomorrowTitle}</b>`,
    `${b(tomorrow.arrivals)} –∑–∞–µ–∑–¥ üì• | ${b(tomorrow.departures)} –≤—ã–µ–∑–¥ üì§`,
    `${b(tomorrow.living)} –ø—Ä–æ–∂–∏–≤–∞–µ—Ç üõå | ${b(tomorrow.cars)} –º–∞—à–∏–Ω üöó`,
    Divider(),
    `${important(unreadNotifications)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–Ω–µ–ø—Ä.) üîî`,
    Divider(),
    `${notImportant(noPrepaidBookings.overall)} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –±–µ–∑ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã`,
    `${important(noPrepaidBookings.reminded)} —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–º –Ω–∞–ø–æ–º–Ω–∏–ª–∏ –∏ –æ–Ω–∏ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏`,
    `${important(noPrepaidBookings.notReminded)} —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–º –Ω–∞–¥–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –∑–∞ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É`,
    `${important(actuallyLivingButNotMarked)} –ø—Ä–æ–∂–∏–≤–∞—é—â–∏—Ö –Ω–µ –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö –∫–∞–∫ –ø—Ä–æ–∂–∏–≤–∞—é—â–∏–µ`
  ].join('\n');
};

export default Dashboard;
